NOTES ON RUST

Compiling and running
rustc ___.rs
./___

How to make functions:
fn ___(var: <parameter type>) -> <return type>{
    /* insert stuff here */
    return 5;
    5
    //line 10 & 11 both return value 5, no semicolon implicitly returns value
}

printing: println!("____");

CARGO
Making a new Project w Cargo (system & package manager)
cargo new _____

What's in a Cargo build?
- src (put all your code here)
- target
    - place where execs and stuff go
- cargo.lock
    - tracks exact versions of dependencies in project
- cargo.toml (configuaration format)
    - [package]: heading to indicate config of package
    - [dependencies]: project's dependencies go here

Building with cargo
- cargo build
    - creates exec file in target/debug/____
- ./target/debug/____
    - runs executable

- cargo run 
    - builds and runs in 1 line

- cargo check
    - checks if it compiles, but doesnt create exec file

- cargo build --release
    - compiles with optimizations
    - adds exec to target/release instead of target/debug

IF GETTING BLOCKING OVERHANG
1.) cargo clean
2.) rm -rf ~/.cargo/registry/index/*
3.) sudo pkill rls cargo

--------------------------------------------------------------------------------------------------------------
STARTING TO CODE

- use std::io;
    - same as C++, to indicate standard library w/ input & output

- let
    - creates a variable, automatically immutable
    - let apples = 5; //immutable
    - let mut apples = 5; //mut specifies mutability

- CONST
    - always immutable

String::new()
    - ::new() is an associated function of type String
        - associated function is implemented on type

io::stdin()
    .read_line(&mut guess)
    .expect("Failed to read line");
        - .read_line take whatever user types and APPEND into a string
            - must be mut, and passed by ref to not make copies of data
            - also returns a value (io::Result)
                - Result variants are Ok and Err
        - if instance of io::Result is an Err value, .expect will cause program to crash and display message
            - if is an Ok value, .expect will output that value

println!("You guessed: {}", guess);
    - {} is placeholder for variables that you specify later on, can have multiple in a single line
        - will be read in order
            - println!("x = {} and y = {}", x, y);

What are crates?
- crate is a collection of Rust source code files
    - rand crate is a library crate contains code to be used in other programs
    
Rand crate
- let secret_number = rand::thread_rng().gen_range(1..101);
    - thread_rng creates random num generator
    - gen_range generates number from range [first, last)
    - 1..101 works same as 1..=100

--------------------------------------------------------------------------------------------------------------

Basic stuff

- if statements
    - same as usual: if {} else if {} else {}
    - inline conditionals
        - let <var> = if <condition> { 3 } else { "String" }
- Loops
    let result = loop {
        break <some variable>;
    }
        - sets result to value at the end of break

    while ___ {
        /* do something */
    }

    let mut a = [10,20,30];
    for element in a.iter() {
        /*do something */
    }

- &: pass by ref
    fn calculate_length(s: &String) -> usize { // Argument type is a reference to string
        s.len() // s value borrowed from wherever calculate_length was called
        //value passed by ref can't be changed though bc not specified as mutable
    }
    fn change(s: &mut String) -> usize { // Argument type is reference to string that can be mutated
        s.push_str(", world");
    }


String Mutations

let s = String::from("hello");
- slicing
    let slice = &s[0..2]; //he
    let slice = &s[..2]; //he
    let slice = &s[..2]; //hel

Defining structs
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

Instantiating structs
let user1 = User {
    username: String::from("user1"),
    email: String::from("user1@gmail.com"),
    sign_in_count: 1,
    active: true,
}; //note the semicolon when creating the instance

Defining and calling methods
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width 8 self.height //this returns bc no semicolon
    }
}

fn main() {
    let rect1 = Rectangle {
        width:30,
        height: 50,
    };
    println!("The area of the rectangle is {} sq pixels", rect1.area());
}

Enums: have individual states like finite state machines
enum IpAddrKind {
    V4,
    V6,
}

let four = IpAddrKind::V4; // instantiate by <enumtype>::<variant>
let six = IpAddrKind::V6;

Match Control Flow Operator
- compares value against enum variant, execute code based on that

fn isDeprecatedIpAddrKind(ip: IpAddrKind) -> bool {
    match ip {
        IpAddrKind::V4 => true,
        IpAddrKind::V6 => false,
    }
}

"if let" control flow
fn numDeprecatedIpAddrKind(ip: IpAddrKind) -> u8 {
    let mut count = 0;
    if let IpAddrKind::V4 = ip {
        count++;
    } else {
        println!("This is up to date");
    }
}
//GO OVER THIS IF LET CONTROL FLOW

Defining Modules
mod front_of_house {
    mod hosting {
        fn add_to_WL() {...}
        fn seat_at_table() {...}
    }

    mod serving {
        fn take_order() {...}
        fn serve_order() {...}
        fn take_payment() {...}
    }
}

Vector: same as C++

let v: Vec <i32> = Vec::new(); //immutable by default
let v = vec![1,2,3];

let mut v = Vec::new();
v.push(5);
v.push(6);

HashMap

use std::collections::HashMap;
let mut scores = HashMap::new();

scores.insert(String::from("blue"), 10);
scores.insert(String::from("Yellow"), 50);

Unrecoverable errors with panic!
fn main() {
    panic!("crash and burn");
}

Recoverable errors with Result

enum Result<T, E> {
    Ok(T),
    Err(E),
}

use std::fs::File;

fn main() {
    let f = File::open("hello.txt");
    let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Error opening the file {:?}", error),
    };
}


Traits - basically same as interface
pub trait Summary {
    fn summarize(&self) ->String;
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}:{}", self.username, self.content)
    }
}

Reading Command Line arguments

use std::env;
use std::fs

fn main() {
    let args: Vec<String> = env::args().collect();
    println!("{:?}", args);
    let filename = "hello.txt";
    println!("In file {}", filename);
    let contents = fs::read_to_string(filename)
        .expect("Something went wrong reading the file");

    println!("With text:\n{}", contents);
}

printing to standard error - eprintln!

fn main() {
    let args: Vec<String> = env::args().collect();
    let config = Config::new(&args).unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {}", err);
        process::exit(1);
    });
    if let Err(e) = minigrep::run(config) {
        eprintln!("Application error: {}", e);
        process::exit(1);
    }
}

Iterator Trait and next method

pub trait Iterator {
    type Item;
    fn next(&mut self)-> Option<Self::Item>;
}

fn iterator_demonstartion() {
    let v1 = vec![1,2,3];
    let mut v1_iter = v1.iter();

    assert_eq!(v1_iter.next(), Some(&1));
    assert_eq!(v1_iter.next(), Some(&2));
    assert_eq!(v1_iter.next(), Some(&3));

    assert_eq!(v1_iter.next(), None);
}

Using Box<T> to store data on the Heap
- used for data types whose size is not known at copile time
- for large amounts of data & you wnt to transfer ownership without copying data

fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}

Running code in Threads simultaneously

use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });
    for i in 1..5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

Passing Messages between Threads

use std::sync::mpsc;
use std::thread;

fn main() {
    let(tx, rx) = mpsc::channel(); //tx transmitter, rx receiver

    thread::spawn(move || {
        let val = String::from("hi");
        tx.send(val).unwrap();
    });
    let received = rex.recv().unwrap();
    println!("Got: {}", received);
}

Using Mutexes to allow access data on one thread

- Mutex<T>
- mutual exclusion
- allows only 1 thread to access some data at any given time
- to allow data in a mutex, thread must first signal that it wants access by asking to acquire lock
- when done w data that mutex guards, must unlock data so other threads can acquire the lock

use std::sync::Mutex;

fn main() {
    let m = Mutex::new(5);
    {
        let mut num = m.lock().unwrap();
        *num = 6;
    }
    println!("m = {:?}", m);
}

Writing tests
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2+2, 4);
    }
}
1.) set up needed data or state
2.) run code you want to test
3.) assert results you expect

